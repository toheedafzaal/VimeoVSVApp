//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebBrowser_HTML_File_CS
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class pubsEntities2 : DbContext
    {
        public pubsEntities2()
            : base("name=pubsEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Rtoken> Rtokens { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<VSVPlay> VSVPlays { get; set; }
        public virtual DbSet<CSActiveProduct> CSActiveProducts { get; set; }
        public virtual DbSet<CSBrand> CSBrands { get; set; }
        public virtual DbSet<CSInventory> CSInventories { get; set; }
        public virtual DbSet<CSLocation> CSLocations { get; set; }
        public virtual DbSet<CSMarket> CSMarkets { get; set; }
        public virtual DbSet<CSMasterCat> CSMasterCats { get; set; }
        public virtual DbSet<CSProduct> CSProducts { get; set; }
        public virtual DbSet<CSReconcile> CSReconciles { get; set; }
        public virtual DbSet<CSReconcileClose> CSReconcileCloses { get; set; }
        public virtual DbSet<CSRollup> CSRollups { get; set; }
        public virtual DbSet<CSSpecialPricing> CSSpecialPricings { get; set; }
        public virtual DbSet<CSSubCat> CSSubCats { get; set; }
        public virtual DbSet<CSUser> CSUsers { get; set; }
        public virtual DbSet<GeneralSetting> GeneralSettings { get; set; }
        public virtual DbSet<GWYWmemberfave> GWYWmemberfaves { get; set; }
        public virtual DbSet<GWYWmember> GWYWmembers { get; set; }
        public virtual DbSet<GWYWnamegender> GWYWnamegenders { get; set; }
        public virtual DbSet<GWYWshop> GWYWshops { get; set; }
        public virtual DbSet<GWYWwishitem> GWYWwishitems { get; set; }
        public virtual DbSet<GWYWwishlist> GWYWwishlists { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<JuiceClub> JuiceClubs { get; set; }
        public virtual DbSet<JuiceStation> JuiceStations { get; set; }
        public virtual DbSet<Market> Markets { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<VCcustomer> VCcustomers { get; set; }
        public virtual DbSet<VCcustomer_test> VCcustomer_test { get; set; }
        public virtual DbSet<VCJuice> VCJuices { get; set; }
        public virtual DbSet<VCKit> VCKits { get; set; }
        public virtual DbSet<VCProduct> VCProducts { get; set; }
        public virtual DbSet<VCSale> VCSales { get; set; }
        public virtual DbSet<VCSalesItem> VCSalesItems { get; set; }
        public virtual DbSet<VCTempOrder> VCTempOrders { get; set; }
        public virtual DbSet<VCTempOrderDetail> VCTempOrderDetails { get; set; }
        public virtual DbSet<VSVAccount> VSVAccounts { get; set; }
        public virtual DbSet<VSVaccountprodvideo> VSVaccountprodvideos { get; set; }
        public virtual DbSet<VSVAccountProdVideo_bk> VSVAccountProdVideo_bk { get; set; }
        public virtual DbSet<VSVArtist> VSVArtists { get; set; }
        public virtual DbSet<VSVBrand> VSVBrands { get; set; }
        public virtual DbSet<VSVEntertainmentVideo> VSVEntertainmentVideos { get; set; }
        public virtual DbSet<VSVEntertainmentVideo1> VSVEntertainmentVideo1 { get; set; }
        public virtual DbSet<VSVLocation> VSVLocations { get; set; }
        public virtual DbSet<VSVManufacturer> VSVManufacturers { get; set; }
        public virtual DbSet<VSVMasterGenre> VSVMasterGenres { get; set; }
        public virtual DbSet<VSVMusicGenre> VSVMusicGenres { get; set; }
        public virtual DbSet<VSVPlaySummary> VSVPlaySummaries { get; set; }
        public virtual DbSet<VSVProduct> VSVProducts { get; set; }
        public virtual DbSet<VSVPromoLog> VSVPromoLogs { get; set; }
        public virtual DbSet<VSVPromoRequestSummary> VSVPromoRequestSummaries { get; set; }
        public virtual DbSet<VSVPromo> VSVPromos { get; set; }
        public virtual DbSet<VSVSampleLog> VSVSampleLogs { get; set; }
        public virtual DbSet<VSVSampleRequestSummary> VSVSampleRequestSummaries { get; set; }
        public virtual DbSet<VSVShopIntro> VSVShopIntroes { get; set; }
        public virtual DbSet<VSVShopOutro> VSVShopOutroes { get; set; }
        public virtual DbSet<VSVShopWarning> VSVShopWarnings { get; set; }
        public virtual DbSet<VSVStoreCountSummary> VSVStoreCountSummaries { get; set; }
        public virtual DbSet<VSVUser> VSVUsers { get; set; }
        public virtual DbSet<VSVuserEVid> VSVuserEVids { get; set; }
        public virtual DbSet<VSVuserVid> VSVuserVids { get; set; }
        public virtual DbSet<VSVuserVid_09dec2020> VSVuserVid_09dec2020 { get; set; }
        public virtual DbSet<VSVuserVid1> VSVuserVid1 { get; set; }
    
        public virtual int addtocart(Nullable<int> customerID, Nullable<int> productID, string productType, Nullable<int> productSubID, Nullable<int> quantity)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("ProductType", productType) :
                new ObjectParameter("ProductType", typeof(string));
    
            var productSubIDParameter = productSubID.HasValue ?
                new ObjectParameter("ProductSubID", productSubID) :
                new ObjectParameter("ProductSubID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addtocart", customerIDParameter, productIDParameter, productTypeParameter, productSubIDParameter, quantityParameter);
        }
    
        public virtual ObjectResult<string> CALLWEBSERVICE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CALLWEBSERVICE");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<spAddToCart_Result> spAddToCart(Nullable<int> customerID, Nullable<int> productId, string productType, Nullable<int> size, Nullable<int> nIC, Nullable<int> quantity, string color)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var productTypeParameter = productType != null ?
                new ObjectParameter("productType", productType) :
                new ObjectParameter("productType", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(int));
    
            var nICParameter = nIC.HasValue ?
                new ObjectParameter("NIC", nIC) :
                new ObjectParameter("NIC", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAddToCart_Result>("spAddToCart", customerIDParameter, productIdParameter, productTypeParameter, sizeParameter, nICParameter, quantityParameter, colorParameter);
        }
    
        public virtual ObjectResult<string> spCheckOut(Nullable<int> customerID, string invoiceID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var invoiceIDParameter = invoiceID != null ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spCheckOut", customerIDParameter, invoiceIDParameter);
        }
    
        public virtual int spFetchEvents(Nullable<int> cNum, string eventType, string where)
        {
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchEvents", cNumParameter, eventTypeParameter, whereParameter);
        }
    
        public virtual ObjectResult<spFetchMemberDetail_Result> spFetchMemberDetail(Nullable<int> recordId, Nullable<int> membershipLevel)
        {
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(int));
    
            var membershipLevelParameter = membershipLevel.HasValue ?
                new ObjectParameter("MembershipLevel", membershipLevel) :
                new ObjectParameter("MembershipLevel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFetchMemberDetail_Result>("spFetchMemberDetail", recordIdParameter, membershipLevelParameter);
        }
    
        public virtual int spFetchReport(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReport", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter);
        }
    
        public virtual int spFetchReportAll(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportAll", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchReportCBB(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportCBB", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchReportCBB_20130722(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportCBB_20130722", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchReportCF(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportCF", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchReportConcerts(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportConcerts", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchReportConcerts_20130731(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportConcerts_20130731", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchReportMLB(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportMLB", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchReportMLB_20130722(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportMLB_20130722", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchReportMLB_V1(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportMLB_V1", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchReportMLB_V2(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportMLB_V2", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchReportMLS(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportMLS", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchReportNBA(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportNBA", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchReportNFL(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportNFL", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchReportNHL(string reportType, string eventType, string ticketGroup, Nullable<double> percent, Nullable<int> dateRange, Nullable<int> cNum, string orderBy)
        {
            var reportTypeParameter = reportType != null ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var ticketGroupParameter = ticketGroup != null ?
                new ObjectParameter("TicketGroup", ticketGroup) :
                new ObjectParameter("TicketGroup", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(double));
    
            var dateRangeParameter = dateRange.HasValue ?
                new ObjectParameter("DateRange", dateRange) :
                new ObjectParameter("DateRange", typeof(int));
    
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchReportNHL", reportTypeParameter, eventTypeParameter, ticketGroupParameter, percentParameter, dateRangeParameter, cNumParameter, orderByParameter);
        }
    
        public virtual int spFetchSalesNFL(Nullable<int> cNum, Nullable<int> eventId, Nullable<System.DateTime> lastScrapeDate, Nullable<int> venueid, string section, string row, string orderBy)
        {
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            var lastScrapeDateParameter = lastScrapeDate.HasValue ?
                new ObjectParameter("LastScrapeDate", lastScrapeDate) :
                new ObjectParameter("LastScrapeDate", typeof(System.DateTime));
    
            var venueidParameter = venueid.HasValue ?
                new ObjectParameter("Venueid", venueid) :
                new ObjectParameter("Venueid", typeof(int));
    
            var sectionParameter = section != null ?
                new ObjectParameter("Section", section) :
                new ObjectParameter("Section", typeof(string));
    
            var rowParameter = row != null ?
                new ObjectParameter("Row", row) :
                new ObjectParameter("Row", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchSalesNFL", cNumParameter, eventIdParameter, lastScrapeDateParameter, venueidParameter, sectionParameter, rowParameter, orderByParameter);
        }
    
        public virtual int spFetchSalesNFL_20130827(Nullable<int> cNum, Nullable<int> eventId, Nullable<System.DateTime> lastScrapeDate, Nullable<int> venueid, string section, string row, string orderBy)
        {
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            var lastScrapeDateParameter = lastScrapeDate.HasValue ?
                new ObjectParameter("LastScrapeDate", lastScrapeDate) :
                new ObjectParameter("LastScrapeDate", typeof(System.DateTime));
    
            var venueidParameter = venueid.HasValue ?
                new ObjectParameter("Venueid", venueid) :
                new ObjectParameter("Venueid", typeof(int));
    
            var sectionParameter = section != null ?
                new ObjectParameter("Section", section) :
                new ObjectParameter("Section", typeof(string));
    
            var rowParameter = row != null ?
                new ObjectParameter("Row", row) :
                new ObjectParameter("Row", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchSalesNFL_20130827", cNumParameter, eventIdParameter, lastScrapeDateParameter, venueidParameter, sectionParameter, rowParameter, orderByParameter);
        }
    
        public virtual int spFetchSalesNFL_Test(Nullable<int> cNum, Nullable<int> eventId, Nullable<System.DateTime> lastScrapeDate, Nullable<int> venueid, string section, string row, string orderBy)
        {
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            var lastScrapeDateParameter = lastScrapeDate.HasValue ?
                new ObjectParameter("LastScrapeDate", lastScrapeDate) :
                new ObjectParameter("LastScrapeDate", typeof(System.DateTime));
    
            var venueidParameter = venueid.HasValue ?
                new ObjectParameter("Venueid", venueid) :
                new ObjectParameter("Venueid", typeof(int));
    
            var sectionParameter = section != null ?
                new ObjectParameter("Section", section) :
                new ObjectParameter("Section", typeof(string));
    
            var rowParameter = row != null ?
                new ObjectParameter("Row", row) :
                new ObjectParameter("Row", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchSalesNFL_Test", cNumParameter, eventIdParameter, lastScrapeDateParameter, venueidParameter, sectionParameter, rowParameter, orderByParameter);
        }
    
        public virtual int spFetchTicketsNFL(Nullable<int> cNum, Nullable<int> eventId, Nullable<System.DateTime> lastScrapeDate, Nullable<int> venueid, string section, string row, string orderBy)
        {
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            var lastScrapeDateParameter = lastScrapeDate.HasValue ?
                new ObjectParameter("LastScrapeDate", lastScrapeDate) :
                new ObjectParameter("LastScrapeDate", typeof(System.DateTime));
    
            var venueidParameter = venueid.HasValue ?
                new ObjectParameter("Venueid", venueid) :
                new ObjectParameter("Venueid", typeof(int));
    
            var sectionParameter = section != null ?
                new ObjectParameter("Section", section) :
                new ObjectParameter("Section", typeof(string));
    
            var rowParameter = row != null ?
                new ObjectParameter("Row", row) :
                new ObjectParameter("Row", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchTicketsNFL", cNumParameter, eventIdParameter, lastScrapeDateParameter, venueidParameter, sectionParameter, rowParameter, orderByParameter);
        }
    
        public virtual int spFetchTicketsNFL_20130827(Nullable<int> cNum, Nullable<int> eventId, Nullable<System.DateTime> lastScrapeDate, Nullable<int> venueid, string section, string row, string orderBy)
        {
            var cNumParameter = cNum.HasValue ?
                new ObjectParameter("CNum", cNum) :
                new ObjectParameter("CNum", typeof(int));
    
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            var lastScrapeDateParameter = lastScrapeDate.HasValue ?
                new ObjectParameter("LastScrapeDate", lastScrapeDate) :
                new ObjectParameter("LastScrapeDate", typeof(System.DateTime));
    
            var venueidParameter = venueid.HasValue ?
                new ObjectParameter("Venueid", venueid) :
                new ObjectParameter("Venueid", typeof(int));
    
            var sectionParameter = section != null ?
                new ObjectParameter("Section", section) :
                new ObjectParameter("Section", typeof(string));
    
            var rowParameter = row != null ?
                new ObjectParameter("Row", row) :
                new ObjectParameter("Row", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFetchTicketsNFL_20130827", cNumParameter, eventIdParameter, lastScrapeDateParameter, venueidParameter, sectionParameter, rowParameter, orderByParameter);
        }
    
        public virtual ObjectResult<spGetCartProductList_Result> spGetCartProductList(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCartProductList_Result>("spGetCartProductList", customerIDParameter);
        }
    
        public virtual ObjectResult<spRemoveFromCart_Result> spRemoveFromCart(Nullable<int> salesItemsID)
        {
            var salesItemsIDParameter = salesItemsID.HasValue ?
                new ObjectParameter("SalesItemsID", salesItemsID) :
                new ObjectParameter("SalesItemsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRemoveFromCart_Result>("spRemoveFromCart", salesItemsIDParameter);
        }
    
        public virtual ObjectResult<string> spUpdateCart(Nullable<int> salesItemsID, Nullable<int> quantity)
        {
            var salesItemsIDParameter = salesItemsID.HasValue ?
                new ObjectParameter("SalesItemsID", salesItemsID) :
                new ObjectParameter("SalesItemsID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spUpdateCart", salesItemsIDParameter, quantityParameter);
        }
    
        public virtual ObjectResult<string> spVSVUpdatePlaySummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spVSVUpdatePlaySummary");
        }
    
        public virtual ObjectResult<string> spVSVUpdatePromoRequestSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spVSVUpdatePromoRequestSummary");
        }
    
        public virtual ObjectResult<string> spVSVUpdateSampleRequestSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spVSVUpdateSampleRequestSummary");
        }
    
        public virtual ObjectResult<string> spVSVUpdateVSVStoreCountSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spVSVUpdateVSVStoreCountSummary");
        }
    }
}
